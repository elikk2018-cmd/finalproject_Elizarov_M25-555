#!/usr/bin/env python3
"""–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π ValutaTrade Hub"""

import os
import subprocess
import sys


def cleanup():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if os.path.exists("data/users.json"):
        os.remove("data/users.json")
    if os.path.exists("data/portfolios.json"):
        os.remove("data/portfolios.json")
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")


def test_single_commands():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–î–ò–ù–û–ß–ù–´–• –ö–û–ú–ê–ù–î ===")
    
    # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    print("\n1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    result = subprocess.run(
        [sys.executable, "main.py", "register", "--username", "demo", "--password", "demo123"],
        capture_output=True, text=True
    )
    if "–£–°–ü–ï–•" in result.stdout:
        print("   ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("   ‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   –í—ã–≤–æ–¥: {result.stdout}")
    
    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞
    print("\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç")
    result = subprocess.run(
        [sys.executable, "main.py", "get-rate", "--from", "USD", "--to", "EUR"],
        capture_output=True, text=True
    )
    if "–ö–£–†–°" in result.stdout:
        print("   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("   ‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # 3. –í—Ö–æ–¥ (—Å–µ—Å—Å–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è)
    print("\n3. –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É (—Å–µ—Å—Å–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏)")
    result = subprocess.run(
        [sys.executable, "main.py", "login", "--username", "demo", "--password", "demo123"],
        capture_output=True, text=True
    )
    if "–£–°–ü–ï–•" in result.stdout:
        print("   ‚úÖ –í—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–æ —Å–µ—Å—Å–∏—è —Ç–µ—Ä—è–µ—Ç—Å—è)")
    else:
        print("   ‚ùå –í—Ö–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_interactive_flow():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ì–û –†–ï–ñ–ò–ú–ê ===")
    
    commands = [
        "register --username trader --password trade123",
        "login --username trader --password trade123",
        "whoami",
        "get_rate --from USD --to BTC",
        "buy --currency USD --amount 1500",
        "buy --currency BTC --amount 0.05", 
        "buy --currency EUR --amount 800",
        "show_portfolio",
        "sell --currency BTC --amount 0.01",
        "show_portfolio --base EUR",
        "logout",
        "exit"
    ]
    
    process = subprocess.Popen(
        [sys.executable, "main.py"],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        bufsize=1
    )
    
    try:
        success_steps = 0
        total_steps = len(commands)
        
        for i, cmd in enumerate(commands, 1):
            print(f"\n{i}/{total_steps}. {cmd}")
            process.stdin.write(cmd + '\n')
            process.stdin.flush()
            
            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥
            output = []
            while True:
                line = process.stdout.readline()
                if not line:
                    break
                if 'valutatrade' in line and '>' in line:
                    break
                if line.strip():
                    output.append(line.strip())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            output_text = '\n'.join(output)
            if any(success in output_text for success in ['–£–°–ü–ï–•', '–ü–û–†–¢–§–ï–õ–¨', '–¢–ï–ö–£–©–ò–ô', '–ö–£–†–°']):
                success_steps += 1
                print("   ‚úÖ –£—Å–ø–µ—Ö")
            else:
                print("   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞")
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            for line in output:
                if any(keyword in line for keyword in ['–£–°–ü–ï–•', '–û–®–ò–ë–ö–ê', '–ü–û–†–¢–§–ï–õ–¨', '–ö–£–†–°', '–¢–ï–ö–£–©–ò–ô']):
                    print(f"      {line}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_steps}/{total_steps} —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        process.terminate()


def check_data_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –î–ê–ù–ù–´–• ===")
    
    try:
        import json
        
        if os.path.exists("data/users.json"):
            with open("data/users.json", "r") as f:
                users = json.load(f)
            print(f"‚úÖ users.json: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å(–µ–π)")
            for user in users:
                print(f"   - {user['username']} (id: {user['user_id']})")
        
        if os.path.exists("data/portfolios.json"):
            with open("data/portfolios.json", "r") as f:
                portfolios = json.load(f)
            print(f"‚úÖ portfolios.json: {len(portfolios)} –ø–æ—Ä—Ç—Ñ–µ–ª—å(–µ–π)")
            for portfolio in portfolios:
                print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {portfolio['user_id']}: {len(portfolio['wallets'])} –∫–æ—à–µ–ª—å–∫–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï VALUTATRADE HUB")
    print("=" * 50)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    cleanup()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_single_commands()
    test_interactive_flow() 
    check_data_files()
    
    print("\n" + "=" * 50)
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
    print("   ‚Ä¢ –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã: python main.py")
    print("   ‚Ä¢ –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: python main.py <–∫–æ–º–∞–Ω–¥–∞>")
    print("   ‚Ä¢ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")


if __name__ == "__main__":
    main()
