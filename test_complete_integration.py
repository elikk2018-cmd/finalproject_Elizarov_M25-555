#!/usr/bin/env python3
"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ —Å–∏–Ω–≥–ª—Ç–æ–Ω–æ–≤"""

import logging
import os
import tempfile

from valutatrade_hub.core.currencies import get_currency
from valutatrade_hub.core.exceptions import (
    AuthenticationError,
    CurrencyNotFoundError,
    InsufficientFundsError,
    ValidationError,
)
from valutatrade_hub.decorators import (
    log_action,
    require_authentication,
    validate_currency,
)
from valutatrade_hub.infra.database import DatabaseManager
from valutatrade_hub.infra.settings import SettingsLoader


def test_enhanced_logging():
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===")

    try:
        # Test logging configuration
        logger = logging.getLogger(__name__)

        # Test different log levels
        logger.debug("Debug message")
        logger.info("Info message")
        logger.warning("Warning message")
        logger.error("Error message")

        # Test structured logging
        logger.info("Structured log", extra={
            'operation': 'TEST',
            'user_id': 123,
            'currency': 'USD',
            'amount': 100.0
        })

        print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö")

        # Check log file creation
        if os.path.exists("logs/valutatrade.log"):
            print("‚úÖ –§–∞–π–ª –ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω")
        else:
            print("‚ö†Ô∏è  –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ)")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


def test_enhanced_exceptions():
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–´–• –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô ===")

    try:
        # Test CurrencyNotFoundError with details
        try:
            get_currency("INVALID")
        except CurrencyNotFoundError as e:
            assert "INVALID" in str(e)
            assert "details" in e.to_dict()
            print("‚úÖ CurrencyNotFoundError —Å –¥–µ—Ç–∞–ª—è–º–∏")

        # Test InsufficientFundsError
        try:
            raise InsufficientFundsError(100, 200, "USD", "purchase")
        except InsufficientFundsError as e:
            assert e.details["available"] == 100
            assert e.details["required"] == 200
            print("‚úÖ InsufficientFundsError —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")

        # Test ValidationError
        try:
            raise ValidationError("email", "invalid", "must be valid email format")
        except ValidationError as e:
            assert e.details["field"] == "email"
            assert e.details["reason"] == "must be valid email format"
            print("‚úÖ ValidationError —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")

        print("‚úÖ –í—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {e}")


def test_thread_safe_singletons():
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–¢–û–ö–û–ë–ï–ó–û–ü–ê–°–ù–´–• –°–ò–ù–ì–õ–¢–û–ù–û–í ===")

    try:
        import threading

        # Test SettingsLoader singleton
        settings1 = SettingsLoader()
        settings2 = SettingsLoader()
        assert settings1 is settings2, "SettingsLoader should be singleton"

        # Test concurrent access
        results = []

        def get_setting(value):
            settings = SettingsLoader()
            results.append(settings.get('default_base_currency'))

        threads = []
        for i in range(5):
            thread = threading.Thread(target=get_setting, args=(i,))
            threads.append(thread)
            thread.start()

        for thread in threads:
            thread.join()

        assert all(r == "USD" for r in results)
        print("‚úÖ SettingsLoader –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π")

        # Test DatabaseManager singleton
        db1 = DatabaseManager()
        db2 = DatabaseManager()
        assert db1 is db2, "DatabaseManager should be singleton"
        print("‚úÖ DatabaseManager –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω–≥–ª—Ç–æ–Ω–æ–≤: {e}")


def test_enhanced_decorators():
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–´–• –î–ï–ö–û–†–ê–¢–û–†–û–í ===")

    try:
        # Test log_action decorator
        @log_action(operation="TEST_OPERATION", verbose=True)
        def test_function(x, y):
            return x + y

        result = test_function(2, 3)
        assert result == 5
        print("‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä log_action —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # Test validate_currency decorator
        @validate_currency('code')
        def currency_function(code):
            return code

        try:
            currency_function("USD")
            print("‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä validate_currency (—É—Å–ø–µ—Ö)")
        except CurrencyNotFoundError:
            print("‚ùå –î–µ–∫–æ—Ä–∞—Ç–æ—Ä validate_currency (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞)")

        try:
            currency_function("INVALID")
            print("‚ùå –î–µ–∫–æ—Ä–∞—Ç–æ—Ä validate_currency (–¥–æ–ª–∂–µ–Ω –±—ã–ª –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É)")
        except CurrencyNotFoundError:
            print("‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä validate_currency (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞)")

        # Test require_authentication decorator
        @require_authentication
        def secure_function():
            return "secret"

        try:
            secure_function()
            print("‚ùå –î–µ–∫–æ—Ä–∞—Ç–æ—Ä require_authentication (–¥–æ–ª–∂–µ–Ω –±—ã–ª –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É)")
        except AuthenticationError:
            print("‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä require_authentication (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞)")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")


def test_database_transactions():
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ë–ê–ó–´ –î–ê–ù–ù–´–• ===")

    with tempfile.TemporaryDirectory() as temp_dir:
        try:
            # Configure settings to use temp directory
            settings = SettingsLoader()
            settings.set('data_dir', temp_dir)
            settings.set('backup_dir', os.path.join(temp_dir, 'backups'))

            db = DatabaseManager()

            # Test transaction
            with db.transaction() as tx:
                tx.add_operation({
                    'type': 'update',
                    'entity': 'test',
                    'key': 'id',
                    'value': 1,
                    'data': {'id': 1, 'name': 'test1'}
                })
                tx.add_operation({
                    'type': 'update',
                    'entity': 'test',
                    'key': 'id',
                    'value': 2,
                    'data': {'id': 2, 'name': 'test2'}
                })
                tx.commit()

            # Verify data was written
            data = db.read_data("test")
            assert len(data) == 2
            print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç")

            # Test backup creation
            backup_files = os.listdir(os.path.join(temp_dir, 'backups'))
            assert any('test_' in f for f in backup_files)
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")


def main():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´")
    print("=" * 60)

    # Ensure logs directory exists
    os.makedirs("logs", exist_ok=True)

    test_enhanced_logging()
    test_enhanced_exceptions()
    test_thread_safe_singletons()
    test_enhanced_decorators()
    test_database_transactions()

    print("\n" + "=" * 60)
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("\nüìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª logs/valutatrade.log –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤")


if __name__ == "__main__":
    main()
