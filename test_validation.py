#!/usr/bin/env python3
"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""

from valutatrade_hub.core.utils import (
    validate_currency_code,
    validate_password,
    validate_username,
)


def test_validation():
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò –î–ê–ù–ù–´–•")
    print("="*40)

    # –¢–µ—Å—Ç—ã –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_cases = [
        ("alice", True, "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è"),
        ("bob123", True, "–ò–º—è —Å —Ü–∏—Ñ—Ä–∞–º–∏"),
        ("test_user", True, "–ò–º—è —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º"),
        ("ab", False, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ"),
        ("", False, "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"),
        ("  ", False, "–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã"),
        ("verylongusername123", True, "–î–ª–∏–Ω–Ω–æ–µ –∏–º—è"),
    ]

    print("\nüë§ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for username, expected, description in test_cases:
        result = validate_username(username)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"   {status} '{username}' ({description}): {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")

    # –¢–µ—Å—Ç—ã –ø–∞—Ä–æ–ª–µ–π
    password_cases = [
        ("1234", True, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞"),
        ("password", True, "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å"),
        ("123", False, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"),
        ("", False, "–ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å"),
    ]

    print("\nüîê –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π:")
    for password, expected, description in password_cases:
        result = validate_password(password)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"   {status} '{password}' ({description}): {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")

    # –¢–µ—Å—Ç—ã –∫–æ–¥–æ–≤ –≤–∞–ª—é—Ç
    currency_cases = [
        ("USD", True, "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥"),
        ("EUR", True, "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥"),
        ("BTC", True, "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"),
        ("U", False, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"),
        ("USDDD", False, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"),
        ("U1", False, "–° —Ü–∏—Ñ—Ä–∞–º–∏"),
        ("", False, "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"),
    ]

    print("\nüí± –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–æ–≤ –≤–∞–ª—é—Ç:")
    for currency, expected, description in currency_cases:
        result = validate_currency_code(currency)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"   {status} '{currency}' ({description}): {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")

if __name__ == "__main__":
    test_validation()
