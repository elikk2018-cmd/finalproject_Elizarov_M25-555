#!/usr/bin/env python3
"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö"""

import tempfile

from valutatrade_hub.core.currencies import (
    CryptoCurrency,
    CurrencyRegistry,
    FiatCurrency,
    get_currency,
)
from valutatrade_hub.core.exceptions import CurrencyNotFoundError
from valutatrade_hub.decorators import log_action
from valutatrade_hub.infra.database import DatabaseManager
from valutatrade_hub.infra.settings import SettingsLoader


def test_currency_hierarchy():
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ï–†–ê–†–•–ò–ò –í–ê–õ–Æ–¢ ===")

    try:
        # Test FiatCurrency
        usd = get_currency("USD")
        assert isinstance(usd, FiatCurrency)
        assert usd.name == "US Dollar"
        assert usd.issuing_country == "United States"
        print(f"‚úÖ USD: {usd.get_display_info()}")

        # Test CryptoCurrency
        btc = get_currency("BTC")
        assert isinstance(btc, CryptoCurrency)
        assert btc.name == "Bitcoin"
        assert btc.algorithm == "SHA-256"
        print(f"‚úÖ BTC: {btc.get_display_info()}")

        # Test unknown currency
        try:
            get_currency("UNKNOWN")
            assert False, "Should raise CurrencyNotFoundError"
        except CurrencyNotFoundError:
            print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã")

        # Test currency registry
        all_currencies = CurrencyRegistry.get_all_currencies()
        assert "USD" in all_currencies
        assert "BTC" in all_currencies
        print(f"‚úÖ –†–µ–µ—Å—Ç—Ä –≤–∞–ª—é—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {len(all_currencies)} –≤–∞–ª—é—Ç")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def test_singleton_pattern():
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SINGLETON –ü–ê–¢–¢–ï–†–ù–ê ===")

    try:
        # Test SettingsLoader singleton
        settings1 = SettingsLoader()
        settings2 = SettingsLoader()
        assert settings1 is settings2, "SettingsLoader should be singleton"

        data_dir = settings1.get('data_dir')
        assert data_dir == "data"
        print(f"‚úÖ SettingsLoader singleton: data_dir = {data_dir}")

        # Test DatabaseManager singleton
        db1 = DatabaseManager()
        db2 = DatabaseManager()
        assert db1 is db2, "DatabaseManager should be singleton"
        print("‚úÖ DatabaseManager singleton —Ä–∞–±–æ—Ç–∞–µ—Ç")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def test_database_operations():
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ô –ë–ê–ó–´ –î–ê–ù–ù–´–• ===")

    # Use temporary directory for testing
    with tempfile.TemporaryDirectory() as temp_dir:
        try:
            # Configure settings to use temp directory
            settings = SettingsLoader()
            settings.set('data_dir', temp_dir)

            db = DatabaseManager()

            # Test write and read
            test_data = [{"id": 1, "name": "test"}, {"id": 2, "name": "test2"}]
            db.write_data("test", test_data)

            read_data = db.read_data("test")
            assert read_data == test_data
            print("‚úÖ –ó–∞–ø–∏—Å—å –∏ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç")

            # Test update entity
            db.update_entity("test", "id", 1, {"id": 1, "name": "updated"})
            updated = db.find_entity("test", "id", 1)
            assert updated["name"] == "updated"
            print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

            # Test find entity
            found = db.find_entity("test", "id", 2)
            assert found["name"] == "test2"
            print("‚úÖ –ü–æ–∏—Å–∫ —Å—É—â–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def test_logging_decorator():
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ï–ö–û–†–ê–¢–û–†–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===")

    try:
        # Create a test function with decorator
        @log_action(verbose=True)
        def test_function(x, y):
            return x + y

        # Test successful execution
        result = test_function(2, 3)
        assert result == 5
        print("‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)")

        # Test error logging
        @log_action()
        def failing_function():
            raise ValueError("Test error")

        try:
            failing_function()
        except ValueError:
            pass  # Expected

        print("‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—à–∏–±–∫–∏)")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
    print("=" * 50)

    test_currency_hierarchy()
    test_singleton_pattern()
    test_database_operations()
    test_logging_decorator()

    print("\n" + "=" * 50)
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")


if __name__ == "__main__":
    main()
