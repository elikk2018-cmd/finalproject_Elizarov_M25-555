#!/usr/bin/env python3
"""–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""

import os
import json
from valutatrade_hub.core.usecases import user_manager, portfolio_manager
from valutatrade_hub.core.exceptions import *
from valutatrade_hub.core.utils import ExchangeRates


def cleanup_test_data():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if os.path.exists("data/users.json"):
        os.remove("data/users.json")
    if os.path.exists("data/portfolios.json"):
        os.remove("data/portfolios.json")
    print("üóëÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")


def test_user_management():
    print("\n" + "="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò")
    print("="*60)
    
    # –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n1. üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'alice'")
    try:
        alice = user_manager.register_user("alice", "password123")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {alice.get_user_info()}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return
    
    # –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–º–µ–Ω–µ–º
    print("\n2. üö´ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–º–µ–Ω–µ–º 'alice'")
    try:
        user_manager.register_user("alice", "anotherpass")
        print("   ‚ùå –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞, –Ω–æ –µ—ë –Ω–µ—Ç!")
    except ValueError as e:
        print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    print("\n3. üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º")
    try:
        auth_user = user_manager.authenticate_user("alice", "password123")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {auth_user.username}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    print("\n4. ‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º")
    try:
        user_manager.authenticate_user("alice", "wrongpassword")
        print("   ‚ùå –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞, –Ω–æ –µ—ë –Ω–µ—Ç!")
    except AuthenticationError as e:
        print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    print("\n5. üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID")
    try:
        user_by_id = user_manager.get_user_by_id(alice.user_id)
        print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user_by_id.username}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return alice


def test_wallet_operations(user):
    print("\n" + "="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ô –° –ö–û–®–ï–õ–¨–ö–ê–ú–ò")
    print("="*60)
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç
    print("\n1. üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç")
    try:
        portfolio = portfolio_manager.get_user_portfolio(user.user_id)
        portfolio_manager.add_currency_to_portfolio(user.user_id, "USD")
        portfolio_manager.add_currency_to_portfolio(user.user_id, "EUR")
        portfolio_manager.add_currency_to_portfolio(user.user_id, "BTC")
        print("   ‚úÖ –í–∞–ª—é—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
        updated_portfolio = portfolio_manager.get_user_portfolio(user.user_id)
        print("   –¢–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:")
        for currency, wallet in updated_portfolio.wallets.items():
            print(f"     - {currency}: {wallet.balance}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return
    
    # –¢–µ—Å—Ç 2: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    print("\n2. üìà –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
    try:
        portfolio_manager.deposit_to_wallet(user.user_id, "USD", 1000.0)
        portfolio_manager.deposit_to_wallet(user.user_id, "EUR", 500.0)
        portfolio_manager.deposit_to_wallet(user.user_id, "BTC", 0.05)
        
        updated_portfolio = portfolio_manager.get_user_portfolio(user.user_id)
        print("   ‚úÖ –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ø–æ–ª–Ω–µ–Ω—ã:")
        for currency, wallet in updated_portfolio.wallets.items():
            print(f"     - {currency}: {wallet.balance}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –°–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    print("\n3. üìâ –°–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å –∫–æ—à–µ–ª—å–∫–∞ USD")
    try:
        portfolio_manager.withdraw_from_wallet(user.user_id, "USD", 200.0)
        updated_portfolio = portfolio_manager.get_user_portfolio(user.user_id)
        usd_balance = updated_portfolio.get_wallet("USD").balance
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —Å–Ω—è—Ç–∏–µ. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å USD: {usd_balance}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –ü–æ–ø—ã—Ç–∫–∞ —Å–Ω—è—Ç—å –±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å
    print("\n4. üö´ –ü–æ–ø—ã—Ç–∫–∞ —Å–Ω—è—Ç—å –±–æ–ª—å—à–µ —Å—Ä–µ–¥—Å—Ç–≤ —á–µ–º –µ—Å—Ç—å –Ω–∞ —Å—á–µ—Ç–µ")
    try:
        portfolio_manager.withdraw_from_wallet(user.user_id, "USD", 5000.0)
        print("   ‚ùå –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞, –Ω–æ –µ—ë –Ω–µ—Ç!")
    except InsufficientFundsError as e:
        print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def test_portfolio_operations(user):
    print("\n" + "="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ô –° –ü–û–†–¢–§–ï–õ–ï–ú")
    print("="*60)
    
    portfolio = portfolio_manager.get_user_portfolio(user.user_id)
    
    # –¢–µ—Å—Ç 1: –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    print("\n1. üßÆ –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ USD")
    try:
        total_value = portfolio.get_total_value("USD")
        print(f"   ‚úÖ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {total_value:.2f} USD")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
        print("   –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞:")
        for currency, wallet in portfolio.wallets.items():
            if currency == "USD":
                value = wallet.balance
            else:
                try:
                    rate = ExchangeRates.get_rate(currency, "USD")
                    value = wallet.balance * rate
                except:
                    value = 0
            print(f"     - {currency}: {wallet.balance} ‚Üí {value:.2f} USD")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ EUR
    print("\n2. üßÆ –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ EUR")
    try:
        total_value_eur = portfolio.get_total_value("EUR")
        print(f"   ‚úÖ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {total_value_eur:.2f} EUR")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    print("\n3. üö´ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª–µ–∫")
    try:
        portfolio.get_wallet("XYZ")
        print("   ‚ùå –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞, –Ω–æ –µ—ë –Ω–µ—Ç!")
    except ValueError as e:
        print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def test_data_persistence():
    print("\n" + "="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–•")
    print("="*60)
    
    print("\n1. üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
    try:
        with open("data/users.json", "r") as f:
            users_data = json.load(f)
        print(f"   ‚úÖ –§–∞–π–ª users.json: {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å(–µ–π)")
        
        with open("data/portfolios.json", "r") as f:
            portfolios_data = json.load(f)
        print(f"   ‚úÖ –§–∞–π–ª portfolios.json: {len(portfolios_data)} –ø–æ—Ä—Ç—Ñ–µ–ª—å(–µ–π)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if users_data:
            user = users_data[0]
            print(f"   üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID={user['user_id']}, –∏–º—è='{user['username']}'")
            print(f"     –•–µ—à –ø–∞—Ä–æ–ª—è: {user['hashed_password'][:20]}...")
            print(f"     –°–æ–ª—å: {user['salt']}")
        
        if portfolios_data:
            portfolio = portfolios_data[0]
            print(f"   üíº –î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è={portfolio['user_id']}")
            print(f"     –ö–æ—à–µ–ª—å–∫–∏: {list(portfolio['wallets'].keys())}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")


def main():
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ ValutaTrade Hub")
    print("="*60)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    cleanup_test_data()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    user = test_user_management()
    
    if user:
        test_wallet_operations(user)
        test_portfolio_operations(user)
        test_data_persistence()
        
        print("\n" + "="*60)
        print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("="*60)
        print("\nüìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: ‚úÖ –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("2. –î–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")
        print("3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Parser Service")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤ –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö")


if __name__ == "__main__":
    main()
