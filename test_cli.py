#!/usr/bin/env python3
"""–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

import os
import subprocess
import sys


def run_command(command):
    """Run a CLI command and return result."""
    try:
        result = subprocess.run(
            [sys.executable, "main.py"] + command,
            capture_output=True,
            text=True,
            timeout=10
        )
        return result.returncode, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        return -1, "", "Command timed out"


def test_cli_commands():
    """Test all CLI commands."""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CLI –ò–ù–¢–ï–†–§–ï–ô–°–ê")
    print("=" * 50)

    # Cleanup test data
    if os.path.exists("data/users.json"):
        os.remove("data/users.json")
    if os.path.exists("data/portfolios.json"):
        os.remove("data/portfolios.json")

    # Test 1: Help command
    print("\n1. Testing help command...")
    returncode, stdout, stderr = run_command(["--help"])
    if returncode == 0 and "–ö–æ–º–∞–Ω–¥—ã" in stdout:
        print("   ‚úÖ Help command works")
    else:
        print("   ‚ùå Help command failed")

    # Test 2: Register user
    print("\n2. Testing user registration...")
    returncode, stdout, stderr = run_command(["register", "--username", "testuser", "--password", "testpass"])
    if returncode == 0 and "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" in stdout:
        print("   ‚úÖ User registration works")
    else:
        print("   ‚ùå User registration failed")
        print(f"      stdout: {stdout}")
        print(f"      stderr: {stderr}")

    # Test 3: Login
    print("\n3. Testing user login...")
    returncode, stdout, stderr = run_command(["login", "--username", "testuser", "--password", "testpass"])
    if returncode == 0 and "–≤–æ—à–ª–∏" in stdout:
        print("   ‚úÖ User login works")
    else:
        print("   ‚ùå User login failed")
        print(f"      stdout: {stdout}")
        print(f"      stderr: {stderr}")

    # Test 4: Whoami command
    print("\n4. Testing whoami command...")
    returncode, stdout, stderr = run_command(["whoami"])
    if returncode == 0 and "testuser" in stdout:
        print("   ‚úÖ Whoami command works")
    else:
        print("   ‚ùå Whoami command failed")

    # Test 5: Get rate command
    print("\n5. Testing get-rate command...")
    returncode, stdout, stderr = run_command(["get-rate", "--from", "USD", "--to", "BTC"])
    if returncode == 0 and "–ö—É—Ä—Å" in stdout:
        print("   ‚úÖ Get-rate command works")
    else:
        print("   ‚ùå Get-rate command failed")

    # Test 6: Buy command
    print("\n6. Testing buy command...")
    returncode, stdout, stderr = run_command(["buy", "--currency", "BTC", "--amount", "0.1"])
    if returncode == 0 and "–ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" in stdout:
        print("   ‚úÖ Buy command works")
    else:
        print("   ‚ùå Buy command failed")
        print(f"      stdout: {stdout}")
        print(f"      stderr: {stderr}")

    # Test 7: Show portfolio command
    print("\n7. Testing show-portfolio command...")
    returncode, stdout, stderr = run_command(["show-portfolio"])
    if returncode == 0 and "–ü–æ—Ä—Ç—Ñ–µ–ª—å" in stdout:
        print("   ‚úÖ Show-portfolio command works")
    else:
        print("   ‚ùå Show-portfolio command failed")

    # Test 8: Logout command
    print("\n8. Testing logout command...")
    returncode, stdout, stderr = run_command(["logout"])
    if returncode == 0 and "–≤—ã—à–ª–∏" in stdout:
        print("   ‚úÖ Logout command works")
    else:
        print("   ‚ùå Logout command failed")

    print("\n" + "=" * 50)
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CLI –ó–ê–í–ï–†–®–ï–ù–û")


if __name__ == "__main__":
    test_cli_commands()
